apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-initdb-job
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name: {{ .Release.Name }}-initdb-job
    spec:
      restartPolicy: Never
      containers:
        - name: initdb
          image: {{ .Values.postgresImage }}
          env:
            - name: POSTGRES_HOST
              valueFrom:
                configMapKeyRef:
                  name: {{ .Release.Name }}-configmap
                  key: db_host
            - name: POSTGRES_PORT
              valueFrom:
                configMapKeyRef:
                  name: {{ .Release.Name }}-configmap
                  key: db_port
            - name: DB_NAME
              valueFrom:
                configMapKeyRef:
                  name: {{ .Release.Name }}-configmap
                  key: db_name
            - name: PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secret
                  key: db_password
            - name: USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secret
                  key: db_username
          command:
            - sh
            - "-c"
            - |
              psql postgresql://$USERNAME:$PASSWORD@$POSTGRES_HOST:$POSTGRES_PORT/$DB_NAME <<'EOF'
                create table app_user(id bigint primary key, login text not null unique, password text not null, role text not null);
                create sequence user_id_sequence owned by app_user.id;
                alter table app_user alter column id set default nextval('user_id_sequence');
                insert into app_user (login, password, role) values ('admin', '$2a$10$Y/aO4nI3C/OS1/.kyb6aMudNoBDKR7JkFjl7ucFhPiER1bFxrXXaO', 'ROLE_ADMIN');
                insert into app_user (login, password, role) values ('updateUser', '$2a$10$mmf3.wELPTqFonFUxjrHIeER0PbG8Vp1kQyPykdEW1BhF9dOsoU8u', 'ROLE_SRV');
                create table refresh_token (refresh_token_id uuid primary key, app_user_id bigint not null unique references app_user(id), expiration_time timestamp);
              EOF
      volumes:
      - name: {{ .Release.Name }}-secret
        secret:
          secretName: {{ .Release.Name }}-secret
      - name: {{ .Release.Name }}-configmap
        configMap:
          name: {{ .Release.Name }}-configmap
  backoffLimit: 2
