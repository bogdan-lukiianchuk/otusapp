{
	"info": {
		"_postman_id": "95840edd-7d68-4e02-8c95-9aa06a234d8f",
		"name": "hw8-idempotence",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "createOrder",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var requestId = pm.variables.replaceIn('{{$randomUUID}}');",
							"pm.collectionVariables.set(\"requestId\", requestId);",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Request is successful with a status code of 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"var responseJSON = JSON.parse(responseBody);",
							"pm.test(\"Response returned order id\", function () {",
							"  pm.expect(responseJSON.orderId).to.be.a(\"number\");",
							"});",
							"",
							"pm.collectionVariables.set(\"orderId\", responseJSON.orderId);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "requestId",
						"value": "{{requestId}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}/api/orders/",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"orders",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "createOrder duplicate",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Request is successful with a status code of 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"var responseJSON = JSON.parse(responseBody);",
							"pm.test(\"Id is equal to the Id of the previous request\", function () {",
							"  pm.expect(responseJSON.orderId).to.eql(pm.variables.get(\"orderId\"));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "requestId",
						"type": "text",
						"value": "{{requestId}}"
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}/api/orders/",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"orders",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "addItems",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Request is successful with a status code of 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"name\": \"молоко\",\n   \"count\": 10\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/api/orders/{{orderId}}/products",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"orders",
						"{{orderId}}",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "checkOrder",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Request is successful with a status code of 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Request has two items\", function () {",
							"  pm.expect(jsonData.items.length).to.equal(1);",
							"});",
							"",
							"pm.test(\"Response returned totalCost 580\", function () {",
							"  pm.expect(jsonData.totalCost).to.equal(580);",
							"});",
							"",
							"pm.test(\"Item count equal 10\", function () {",
							"  pm.expect(jsonData.items[0].count).to.equal(10);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"name\": \"молоко\",\n   \"count\": 10\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/api/orders/{{orderId}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"orders",
						"{{orderId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "addItems duplicate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Request is successful with a status code of 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"name\": \"молоко\",\n   \"count\": 10\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/api/orders/{{orderId}}/products",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"orders",
						"{{orderId}}",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "checkOrder  not change",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Request is successful with a status code of 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Request has two items\", function () {",
							"  pm.expect(jsonData.items.length).to.equal(1);",
							"});",
							"",
							"pm.test(\"Response returned totalCost 580\", function () {",
							"  pm.expect(jsonData.totalCost).to.equal(580);",
							"});",
							"",
							"pm.test(\"Item count equal 10\", function () {",
							"  pm.expect(jsonData.items[0].count).to.equal(10);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"name\": \"молоко\",\n   \"count\": 10\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/api/orders/{{orderId}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"orders",
						"{{orderId}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
					"tests[\"[INFO] Response: \" + responseBody] = true;"
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyIiwibG9naW4iOiJKb2huIiwiYXV0aCI6IlJPTEVfVVNFUiIsImV4cCI6MTY1MDI5MTYzNSwiaWF0IjoxNjE4NzU1NjM1fQ.bQWfx-y9eSU-hHcAjkQxZDgaiOuVShKLmeNg548xTDsoTW-Cqf3ZFxkr2m6L9z0ftNNWvk5UULxGZ_ww9Syu1w"
		},
		{
			"key": "baseUrl",
			"value": "arch.homework"
		},
		{
			"key": "requestId",
			"value": ""
		},
		{
			"key": "orderId",
			"value": ""
		}
	]
}