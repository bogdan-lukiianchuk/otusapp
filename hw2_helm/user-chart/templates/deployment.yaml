{{- $svcPort := .Values.service.port -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "user-chart.fullname" . }}
  labels:
    {{- include "user-chart.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "user-chart.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configMap.yaml") . | sha256sum }}
      labels:
        {{- include "user-chart.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "user-chart.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: check-db-ready
          image: {{ .Values.postgresImage }}
          env:
            - name: POSTGRES_HOST
              valueFrom:
                configMapKeyRef:
                  name: {{ .Release.Name }}-configmap
                  key: db_host
            - name: POSTGRES_PORT
              valueFrom:
                configMapKeyRef:
                  name: {{ .Release.Name }}-configmap
                  key: db_port
          command:
            - sh
            - "-c"
            - |
              until pg_isready -h $POSTGRES_HOST -p $POSTGRES_PORT;
              do echo waiting for database; sleep 2; done;
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ $svcPort }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: {{ .Values.probe.path }}
              port: {{ $svcPort }}
          readinessProbe:
            httpGet:
              path: {{ .Values.probe.path }}
              port: {{ $svcPort }}
          env:
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secret
                  key: db_password
            - name: SPRING_DATASOURCE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secret
                  key: db_username
          envFrom:
            - configMapRef:
                name: {{ .Release.Name }}-configmap
          volumeMounts:
              - name: application-config
                mountPath: /app/config
                readOnly: true
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
      volumes:
       - name: application-config
         configMap:
           name: {{ .Release.Name }}-configmap
           items:
             - key: application.properties
               path: application.properties
       - name: {{ .Release.Name }}-configmap
         configMap:
            name: {{ .Release.Name }}-configmap
       - name: {{ .Release.Name }}-secret
         secret:
           secretName: {{ .Release.Name }}-secret
