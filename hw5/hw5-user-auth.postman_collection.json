{
	"info": {
		"_postman_id": "ca7cbdf8-8305-4378-996e-d25fb66ab788",
		"name": "hw5-user-auth",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "register",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var login = pm.variables.replaceIn('{{$randomFirstName}}');",
							"pm.collectionVariables.set(\"login\", login);",
							"pm.collectionVariables.set(\"password\", login);",
							"pm.collectionVariables.set(\"token\", null);",
							"const jar = pm.cookies.jar();",
							"jar.clear(pm.request.url, function (error) {",
							"  // error - <Error>",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"password\": \"{{password}}\",\n    \"login\": \"{{login}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/auth/register",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "getUserWithoutLogin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"status 403\", function() {",
							"    pm.response.to.have.status(403);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/users",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"token\", pm.cookies.get('Authorization'));",
							"pm.test(\"status 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"has Authorization cookie\", function() {",
							"    pm.cookies.has(\"Authorization\");",
							"});",
							"pm.test(\"has refresh cookie\", function() {",
							"    pm.cookies.has(\"refresh\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"password\": \"{{password}}\",\n    \"login\": \"{{login}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/auth/login",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "getUser",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.test(\"has Authorization cookie\", function() {",
							"    pm.cookies.has(\"Authorization\");",
							"});",
							"",
							"pm.test(\"has token\", function() {",
							"    pm.collectionVariables.has(\"token\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/users/",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "refresh",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"token\", pm.cookies.get('Authorization'));",
							"",
							"pm.test(\"Cookie Authorization is present\", () => {",
							"  pm.expect(pm.cookies.has('Authorization')).to.be.true;",
							"});",
							"",
							"pm.test(\"Cookie refresh is present\", () => {",
							"  pm.expect(pm.cookies.has('refresh')).to.be.true;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/auth/refresh",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"refresh"
					]
				}
			},
			"response": []
		},
		{
			"name": "updateUser",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var phoneNumber = pm.variables.replaceIn('{{$randomPhoneNumber}}');",
							"var email = pm.variables.replaceIn('{{$randomEmail}}');",
							"var login = pm.variables.replaceIn('{{$randomFirstName}}');",
							"pm.collectionVariables.set(\"login\", login);",
							"pm.collectionVariables.set(\"email\", email);",
							"pm.collectionVariables.set(\"phoneNumber\", phoneNumber);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"login\": \"{{login}}\",\n    \"email\": \"{{email}}\",\n    \"phoneNumber\": \"{{phoneNumber}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/users/",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "getUser after change",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/users/",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "register second user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var login = pm.variables.replaceIn('{{$randomFirstName}}');",
							"pm.collectionVariables.set(\"login\", login);",
							"pm.collectionVariables.set(\"password\", login);",
							"pm.collectionVariables.set(\"token\", null);",
							"const jar = pm.cookies.jar();",
							"jar.clear(pm.request.url, function (error) {",
							"  // error - <Error>",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"auth token is null\", () => {",
							"    pm.expect(pm.variables.get(\"token\")).to.null;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"password\": \"{{password}}\",\n    \"login\": \"{{login}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/auth/register",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "auth second user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"token\", pm.cookies.get('Authorization'));",
							"pm.test(\"status 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"has Authorization cookie\", function() {",
							"    pm.cookies.has(\"Authorization\");",
							"});",
							"pm.test(\"has refresh cookie\", function() {",
							"    pm.cookies.has(\"refresh\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"password\": \"{{password}}\",\n    \"login\": \"{{login}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/auth/login",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "getUser second user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.test(\"has Authorization cookie\", function() {",
							"    pm.cookies.has(\"Authorization\");",
							"});",
							"",
							"pm.test(\"has token\", function() {",
							"    pm.collectionVariables.has(\"token\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/users/",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						""
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "baseUrl",
			"value": "arch.homework"
		},
		{
			"key": "login",
			"value": ""
		},
		{
			"key": "password",
			"value": ""
		},
		{
			"key": "phoneNumber",
			"value": ""
		},
		{
			"key": "email",
			"value": ""
		}
	]
}